(ns pacman.ghost
  (:require [pacman.constants :as const]
            [pacman.helpers :as helper]))

(defn add-bounded 
  "Collision detection."
  [x1 x2]
  (let [rem (mod x1 10)
        result (+ rem x2)]
    (cond (and (not= rem 0 )(> result 10)) (+ x1 (- 10 rem))
          (and (> rem 0) (< result 0)) (- x1 rem))
    :else (+ x1 x2)))

(defn is-vulnerable? [ghost]
  (= (:eatable ghost) nil))

(defn is-hidden? [ghost]
  (and (= (:eatable ghost) nil)
       (not= (:eaten ghost) nil)))

(defn get-new-coord 
  [ghost dir current]
  (let [speed (if (= (is-vulnerable? ghost) true) (if (is-hidden? ghost) 4 2))
        x-speed (or 
                  (and (= dir (:left const/game-const)) (- speed))
                  (and (= dir (:right const/game-const)) speed) 
                  0)
        y-speed (or 
                  (and (= dir (:down const/game-const)) speed)
                  (and (= dir (:up const/game-const)) (- speed)) 
                  0)]

    {:x (add-bounded (:x current) x-speed) 
     :y (add-bounded (:y current) y-speed)}))

(defn is-dangerous? 
  [ghost]
  (= (:eaten ghost) nil))

(defn get-random-direction [ghost]
  (let [moves (if (or (= (:direction ghost) (:left const/game-const))
                      (= (:direction ghost) (:rigt const/game-const)))
                [(:up const/game-const) (:down const/game-const)]
                [(:left const/game-const) (:right const/game-const)])]))



;; =====================================================
;; Reset ghost state
;; =====================================================

(defn ghost-init-state [ghost] 
  {:eaten nil, 
   :eatable nil, 
   :position {:x 90, :y 80}
   :direction (get-random-direction ghost)
   :due (get-random-direction ghost)})

(defn reset-ghost [ghost]
  (merge-with merge ghost (ghost-init-state ghost)))

(defn reset-state! []
  (swap! state/game-state update-in [:ghosts] #(map reset-ghost %)))

;; =====================================================

(defn on-whole-square [x]
  (== (mod x 10) 0))

(defn opposite-direction 
  "Send the ghost scurrying off in the opposite direction."
  [dir]
  (or (== dir [(:left const/game-const) (:right const/game-const)])
      (== dir [(:right const/game-const) (:left const/game-const)])
      (or (== dir [(:up const/game-const) (:down const/game-const)]) (:up const/game-const))))

;; =====================================================
;; Make ghost eatable

(defn set-eatable-data [ghost]
  {:direction (opposite-direction (:direction ghost))
   :eatable (helper/get-tick)})

(defn merge-ghost-eatable [ghost]
  (merge-with merge ghost (ghost-init-state ghost)))

(defn make-eatable! []
  (swap! state/game-state update-in [:ghosts] #(map merge-ghost-eatable %)))

;; =====================================================

#_(defn make-eatable []
    (swap! state/game-state assoc-in [:direction] (opposite-direction (:direction ghost)))
    (swap! state/game-state assoc-in [:eatable] helper/get-tick))

;; This doesn't work.
(defn eat []
  (swap! state/game-state assoc-in [:eatble] nil)
  (swap! state/game-state assoc-in [:eaten] helper/get-tick))

(defn point-to-cord [x]
  (.round js/Math (/ x 10)))

(defn next-square 
  [x dir]
  (let [rem (mod x 10)]
    (cond 
     (== rem 0) x
     (or (== dir (:right const/game-const))
         (== dir (:down const/game-const)))(+ x (- 10 rem)))
    :else (- x rem)))
(defn on-grid-square [pos]
  (and (on-whole-square (:y pos)) (on-whole-square (:x pos))))

(defn seconds-ago [tick]
  (/ (- helper/get-tick tick) const/FPS))

;; What is color? Need to define it!
(defn get-color [ghost]
  (cond 
   (not= (:eatable ghost) nil 
     (if (> (seconds-ago (:eatable ghost)) 5)
       (if (> (mod helper/get-tick 20) 10) "#FFFFFF" "#0000BB")))
   (if (:eaten ghost) "#222")
   :else (:color ghost)))

(defn draw [ghost]
  (let [ctx (:ctx @state/game-state)
         position (:position ghost)
         s (:block-size @gamemap/map-state)
         eatable (:eatable ghost)
         top (* (/ (:y position) 10) 2)
         left (* (/ (:x position) 10) 2)
         tl (+ left s)
         base (- (+ top s) 3)
         inc (/ s 10)
         high (if (> (mod helper/get-tick 10) 5) 3 -3)
         low (if (> (mod helper/get-tick 10) 5) -3 3)
         direction (:direction ghost)
         f (/ s 12)
         off {}]

    (cond 
      (and eatable (> (seconds-ago eatable) 8)) (swap! ghost assoc-in [:eatable] nil)
      (and eatable (> (seconds-ago eatable) 3)) (swap! ghost assoc-in [:eaten] nil))
    
    (set! (. ctx -fillStyle) (:specs ghost))
                                        ;(set! (. ctx -fillStyle) (get-color ghost))

    (.beginPath ctx)
    (.moveTo ctx left base)

    (.quadraticCurveTo ctx left top (+ left (/ s 2)) top)
    (.quadraticCurveTo ctx (+ left s) top (+ left s) base)
    (.quadraticCurveTo ctx (- tl (* inc 1)) (+ base high) (- (* inc 2) tl) base)
    (.quadraticCurveTo ctx (- tl (* inc 3)) (+ base low)  (- (* inc 4) tl) base)
    (.quadraticCurveTo ctx (- tl (* inc 5)) (+ base high) (- (* inc 6) tl) base)
    (.quadraticCurveTo ctx (- tl (* inc 7)) (+ base low)  (- (* inc 8) tl) base)
    (.quadraticCurveTo ctx (- tl (* inc 9)) (+ base low)  (- (* inc 8) tl) base)
    
    (.closePath ctx)
    (.fill ctx)
    (.beginPath ctx)
    (set! (. ctx -fillStyle) "#FFF")
    (.arc ctx (+ left 6) (+ top 6) (/ s 6) 0 300 false)
    (.arc ctx (- (+ left s) 6) (+ top 6) (/ s 6) 0 300 false)
    (.closePath ctx)
    (.fill ctx)
    
    (conj off {:right [f 0] :left [(- f)  0] :up [0 (- f)] :down [0 f]})

    (.beginPath ctx)
    (set! (. ctx -fillStyle) "#000")
    (.arc ctx (+ left 6 (nth ((keyword direction) off) 0)) (+ left 6 (nth ((keyword direction) off) 1)) (/ s 15) 0 300 false)
    (.arc ctx (+ (- (+ left s) 6) (nth ((keyword direction) off) 0)) (+ top 6 (nth ((keyword direction) off) 1)) (/ s 15) 0 300 false)
    (.closePath ctx)
    (.fill ctx)))

(defn pane [pos dir]
  (cond 
   (and (= (:y pos) 100) (>= (:x pos) 190) (= dir (:right const/game-const))) {:y 100 :x -10}
   (and (= (:y pos) 100) (<= (:x pos) -10) (= dir (:left const/game-const))) {:y 100 :x 190}))

;; ====================================================
;; Move ghost - experimental
;; ====================================================

(defn get-npos [ghost]
  (cond (nil? (:npos ghost)) (get-new-coord ghost (:direction ghost) (:position ghost))
        (not= (:due ghost) (:direction ghost)) (get-new-coord ghost (:due ghost) (:position ghost))))

(defn tmp-pos [ghost]
  (if-let [tmp (pane (:position ghost) (:direction ghost))]
           tmp))

(defn change-direction [ghost]
  (let [due (:due ghost)
        npos (get-new-coord ghost due (:position ghost))]
    (if (and (on-grid-square (:position ghost)) (gamemap/is-floor-space? {:y (helper/point-to-coord (next-square (:y (:npos ghost)) due)) 
                                                                          :x (helper/point-to-coord (next-square (:x (:npos ghost)) due))}))
      (:due ghost)
      nil)))

(defn reset-ghost-direction! [ghost] 
  {:old-pos (:position ghost)
   :npos (get-npos ghost)
   :position (if (nil? (tmp-pos ghost)) (:due ghost) (tmp-pos ghost)) 
   :direction (change-direction ghost)
   :due (change-direction ghost)})

(defn ghost-moves [ghost]
  (merge-with merge ghost (reset-ghost-direction! ghost)))

(defn move! []
  (swap! state/game-state update-in [:ghosts] #(map ghost-moves %)))

